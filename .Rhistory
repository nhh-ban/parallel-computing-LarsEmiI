simTweedieTest <- function(N) {
# Simulate data from the Tweedie distribution
simulated_data <- rtweedie(n = N, mu = 10000, phi = 100, power = 1.9)
# Perform a t-test on the simulated data with the null hypothesis mu = 10000
p_value <- t.test(simulated_data, mu = 10000)$p.value
# Return the p-value
return(p_value)
}
# 2 - Creating the MTweedieTests() function:
MTweedieTests <- function(M, N, alpha) {
# Initialize counter for number of tests where p-value is less than alpha
count_rejected <- 0
# Run M tests
for (i in 1:M) {
p_value <- simTweedieTest(N)
if (p_value < alpha) {
count_rejected <- count_rejected + 1
}
}
# Calculate and return the percentage
percentage_rejected <- count_rejected / M
return(percentage_rejected)
}
result <- MTweedieTests(10, 100, 0.05) # N = 100
print(result)
# 3 - Create a figure with N on the X-axis and share_reject on the Y-axis.
results <- tibble(N = c(10, 100, 1000, 5000), M = 100, share_reject = NA_real_)
alpha = 0.05
for (i in 1:nrow(results)) {
results$share_reject[i] <- MTweedieTests(results$M[i], results$N[i], alpha)
}
ggplot(data = results, aes(x = N, y = share_reject)) +
geom_point() +
geom_line(group = 1) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") + # dashed line with alpha = 0.05
labs(title = "Proportion of Rejections by Sample Size",
x = "Sample Size (N)",
y = "Proportion of Rejections (at alpha = 0.05)") +
theme_minimal()
# 4
# General simulation function
set.seed(1)
simulateTestData <- function(N, distribution = "tweedie") {
if (distribution == "tweedie") {
return(rtweedie(n = N, mu = 10000, phi = 100, power = 1.9))
} else if (distribution == "normal") {
return(rnorm(n = N, mean = 10000, sd = 100))  # Assumed sd=100 for normal
} else {
stop("Invalid distribution type.")
}
}
# Rewriting function from question 1
simTest <- function(N, distribution = "tweedie") {
simulated_data <- simulateTestData(N, distribution) # Data is simulated using the simulateTestData Function.
p_value <- t.test(simulated_data, mu = 10000)$p.value # t-test to test hypothesis that the mean is 10000
return(p_value) # P-value of test is returned
}
# Rewriting function from question 2
MTests <- function(M, N, alpha, distribution = "tweedie") {
count_rejected <- 0
for (i in 1:M) {
p_value <- simTest(N, distribution)
if (p_value < alpha) {
count_rejected <- count_rejected + 1
}
}
percentage_rejected <- count_rejected / M
return(percentage_rejected)
}
results <- tibble(N = c(10, 100, 1000, 5000), M = 100,
share_reject_tweedie = NA_real_,
share_reject_normal = NA_real_) # columns that store the proportion of tests that rejects the h0 for each distribution type
# Rewriting function from question 3
alpha = 0.05
for (i in 1:nrow(results)) {
results$share_reject_tweedie[i] <- MTests(results$M[i], results$N[i], alpha, "tweedie")
results$share_reject_normal[i] <- MTests(results$M[i], results$N[i], alpha, "normal")
}
# Plot
ggplot(data = results) +
geom_line(aes(x = N, y = share_reject_tweedie, color = "Tweedie")) +
geom_line(aes(x = N, y = share_reject_normal, color = "Normal")) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
labs(title = "Proportion of Rejections by Sample Size",
x = "Sample Size (N)",
y = "Proportion of Rejections",
color = "Distribution") +
theme_minimal()
# 1 - Function with arguments N , mu and sigma that simulates N observations from a normal distribution with mean mu and standard deviation sigma, and returns the mean of the sample.
set.seed(1)
sim_norm <- function(N, mu=0, sigma=1) {
# Simulate N observations from a normal distribution
observations <- rnorm(N, mean=mu, sd=sigma)
# Return the sample mean
return(mean(observations))
}
# Example usage:
sample_mean2 <- sim_norm(100, mu=5, sigma=2)
print(sample_mean2)
# 2 - For-loop to fill the vector with sample means from repeated applications of the functio
M <- 20
sample_means <- rep(NA, M)
for(i in 1:M) {
sample_means[i] <- sim_norm(100)
}
sample_means
# 3 - Calculate the standard deviation of all the sample means
sample_sd <- sd(sample_means)
sample_sd
true_se <- 1/sqrt(100) # as sigma=1 and N=100
true_se
# 4 - Create this table as a data frame (or a tibble) in R, with a suitable sequence of sample sizes
library(dplyr)
# Sequence of sample sizes from 10 to 200 in increments of 10
sample_sizes <- seq(10, 200, by=10)
simexp <- tibble(
N = sample_sizes,
st_dev = NA_real_,
sigma = 1  # Assuming sigma=1 for this experiment
)
simexp <- simexp %>%
mutate(theoretical = sigma / sqrt(N))
print(simexp)
for (i in 1:nrow(simexp)) {
# Sample M means for the current sample size
sample_means <- replicate(M, sim_norm(simexp$N[i]))
# Calculate and store the standard deviation of the sample means
simexp$st_dev[i] <- sd(sample_means)
}
print(simexp)
# 6 - Plot comparing observed and theoretical standard deviation of sample means
library(ggplot2)
ggplot(simexp, aes(x = N)) +
geom_line(aes(y = st_dev, color = "Observed"), size = 1) +
geom_line(aes(y = theoretical, color = "Theoretical"), size = 1, linetype = "dashed") +
labs(
title = "Comparison of Observed vs Theoretical Standard Deviation of Sample Means",
y = "Standard Deviation",
x = "Sample Size",
color = "Legend"
) +
theme_minimal()
# 6 - Plot comparing observed and theoretical standard deviation of sample means
library(ggplot2)
# 6 - Plot comparing observed and theoretical standard deviation of sample means
library(ggplot2)
ggplot(simexp, aes(x = N)) +
geom_line(aes(y = st_dev, color = "Observed")) +
geom_line(aes(y = theoretical, color = "Theoretical"), linetype = "dashed") +
labs(
title = "Comparison of Observed vs Theoretical Standard Deviation of Sample Means",
y = "Standard Deviation",
x = "Sample Size",
color = "Legend"
) +
theme_minimal()
# PROBLEM 2 ----
library(tweedie)
rtweedie(n = 10, mu = 10000, phi = 1000, power = 1.9)
x <- rtweedie(n = 100000, mu = 10000, phi = 1000, power = 1.9)
mean(x)
N <- 100
true_mu <- 10000
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
# 1 - Creating the simTweedieTest function:
set.seed(1)
simTweedieTest <- function(N) {
# Simulate data from the Tweedie distribution
simulated_data <- rtweedie(n = N, mu = 10000, phi = 100, power = 1.9)
# Perform a t-test on the simulated data with the null hypothesis mu = 10000
p_value <- t.test(simulated_data, mu = 10000)$p.value
# Return the p-value
return(p_value)
}
simTweedieTest <- function(N) {
# Simulate data from the Tweedie distribution
simulated_data <- rtweedie(n = N, mu = 10000, phi = 100, power = 1.9)
# Perform a t-test on the simulated data with the null hypothesis mu = 10000
p_value <- t.test(simulated_data, mu = 10000)$p.value
# Return the p-value
return(p_value)
}
# 2 - Creating the MTweedieTests() function:
MTweedieTests <- function(M, N, alpha) {
# Initialize counter for number of tests where p-value is less than alpha
count_rejected <- 0
# Run M tests
for (i in 1:M) {
p_value <- simTweedieTest(N)
if (p_value < alpha) {
count_rejected <- count_rejected + 1
}
}
# Calculate and return the percentage
percentage_rejected <- count_rejected / M
return(percentage_rejected)
}
result <- MTweedieTests(10, 100, 0.05) # N = 100
print(result)
# 3 - Create a figure with N on the X-axis and share_reject on the Y-axis.
results <- tibble(N = c(10, 100, 1000, 5000), M = 100, share_reject = NA_real_)
alpha = 0.05
for (i in 1:nrow(results)) {
results$share_reject[i] <- MTweedieTests(results$M[i], results$N[i], alpha)
}
ggplot(data = results, aes(x = N, y = share_reject)) +
geom_point() +
geom_line(group = 1) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") + # dashed line with alpha = 0.05
labs(title = "Proportion of Rejections by Sample Size",
x = "Sample Size (N)",
y = "Proportion of Rejections (at alpha = 0.05)") +
theme_minimal()
# 4
# General simulation function
set.seed(1)
simulateTestData <- function(N, distribution = "tweedie") {
if (distribution == "tweedie") {
return(rtweedie(n = N, mu = 10000, phi = 100, power = 1.9))
} else if (distribution == "normal") {
return(rnorm(n = N, mean = 10000, sd = 100))  # Assumed sd=100 for normal
} else {
stop("Invalid distribution type.")
}
}
# Rewriting function from question 1
simTest <- function(N, distribution = "tweedie") {
simulated_data <- simulateTestData(N, distribution) # Data is simulated using the simulateTestData Function.
p_value <- t.test(simulated_data, mu = 10000)$p.value # t-test to test hypothesis that the mean is 10000
return(p_value) # P-value of test is returned
}
# Rewriting function from question 2
MTests <- function(M, N, alpha, distribution = "tweedie") {
count_rejected <- 0
for (i in 1:M) {
p_value <- simTest(N, distribution)
if (p_value < alpha) {
count_rejected <- count_rejected + 1
}
}
percentage_rejected <- count_rejected / M
return(percentage_rejected)
}
results <- tibble(N = c(10, 100, 1000, 5000), M = 100,
share_reject_tweedie = NA_real_,
share_reject_normal = NA_real_) # columns that store the proportion of tests that rejects the h0 for each distribution type
# Rewriting function from question 3
alpha = 0.05
for (i in 1:nrow(results)) {
results$share_reject_tweedie[i] <- MTests(results$M[i], results$N[i], alpha, "tweedie")
results$share_reject_normal[i] <- MTests(results$M[i], results$N[i], alpha, "normal")
}
# Plot
ggplot(data = results) +
geom_line(aes(x = N, y = share_reject_tweedie, color = "Tweedie")) +
geom_line(aes(x = N, y = share_reject_normal, color = "Normal")) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
labs(title = "Proportion of Rejections by Sample Size",
x = "Sample Size (N)",
y = "Proportion of Rejections",
color = "Distribution") +
theme_minimal()
# We see that normal distribution works better with t-test at lower sample sizes compared to tweedie.
# We see that normal distribution works better with t-test at lower sample sizes compared to tweedie.
# Unsure how to interpret this plot...
# 1 - Creating the simTweedieTest function:
set.seed(1)
simTweedieTest <- function(N) {
simulated_data <- rtweedie(n = N, mu = 10000, phi = 100, power = 1.9)   # Simulate data from the Tweedie distribution
p_value <- t.test(simulated_data, mu = 10000)$p.value   # Perform a t-test on the simulated data with the null hypothesis mu = 10000
return(p_value)
}
# 2 - Creating the MTweedieTests() function:
MTweedieTests <- function(M, N, alpha) {
# Initialize counter for number of tests where p-value is less than alpha
count_rejected <- 0
# Run M tests
for (i in 1:M) {
p_value <- simTweedieTest(N)
if (p_value < alpha) {
count_rejected <- count_rejected + 1
}
}
# Calculate and return the percentage
percentage_rejected <- count_rejected / M
return(percentage_rejected)
}
result <- MTweedieTests(10, 100, 0.05) # N = 100
print(result)
# 3 - Create a figure with N on the X-axis and share_reject on the Y-axis.
results <- tibble(N = c(10, 100, 1000, 5000), M = 100, share_reject = NA_real_)
alpha = 0.05
for (i in 1:nrow(results)) {
results$share_reject[i] <- MTweedieTests(results$M[i], results$N[i], alpha)
}
ggplot(data = results, aes(x = N, y = share_reject)) +
geom_point() +
geom_line(group = 1) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") + # dashed line with alpha = 0.05
labs(title = "Proportion of Rejections by Sample Size",
x = "Sample Size (N)",
y = "Proportion of Rejections (at alpha = 0.05)") +
theme_minimal()
# 4
# General simulation function
set.seed(1)
simulateTestData <- function(N, distribution = "tweedie") {
if (distribution == "tweedie") {
return(rtweedie(n = N, mu = 10000, phi = 100, power = 1.9))
} else if (distribution == "normal") {
return(rnorm(n = N, mean = 10000, sd = 100))  # Assumed sd=100 for normal
} else {
stop("Invalid distribution type.")
}
}
# Rewriting function from question 1
simTest <- function(N, distribution = "tweedie") {
simulated_data <- simulateTestData(N, distribution) # Data is simulated using the simulateTestData Function.
p_value <- t.test(simulated_data, mu = 10000)$p.value # t-test to test hypothesis that the mean is 10000
return(p_value) # P-value of test is returned
}
# Rewriting function from question 2
MTests <- function(M, N, alpha, distribution = "tweedie") {
count_rejected <- 0
for (i in 1:M) {
p_value <- simTest(N, distribution)
if (p_value < alpha) {
count_rejected <- count_rejected + 1
}
}
percentage_rejected <- count_rejected / M
return(percentage_rejected)
}
results <- tibble(N = c(10, 100, 1000, 5000), M = 100,
share_reject_tweedie = NA_real_,
share_reject_normal = NA_real_) # columns that store the proportion of tests that rejects the h0 for each distribution type
# Rewriting function from question 3
alpha = 0.05
for (i in 1:nrow(results)) {
results$share_reject_tweedie[i] <- MTests(results$M[i], results$N[i], alpha, "tweedie")
results$share_reject_normal[i] <- MTests(results$M[i], results$N[i], alpha, "normal")
}
# Plot
ggplot(data = results) +
geom_line(aes(x = N, y = share_reject_tweedie, color = "Tweedie")) +
geom_line(aes(x = N, y = share_reject_normal, color = "Normal")) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
labs(title = "Proportion of Rejections by Sample Size",
x = "Sample Size (N)",
y = "Proportion of Rejections",
color = "Distribution") +
theme_minimal()
# Sequence of sample sizes from 10 to 200 in increments of 10
sample_sizes <- seq(10, 200, by=10)
simexp <- tibble(
N = sample_sizes,
st_dev = NA_real_,
sigma = 1
)
simexp <- simexp %>%
mutate(theoretical = sigma / sqrt(N))
print(simexp)
library(tictoc)
library(tidyverse)
printTicTocLog <- # Function copied from BAN400 lecture about parallell computing
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
# -------------------------------- REGULAR LOOPS -------------------------------
tic("Regular Loop")
source("Scripts/Solution-witouth-PC.R") # Sourcing from the Solution without parallell computing
setwd("C:/Users/larse/iCloudDrive/BAN400/Assignments/parallel-computing-LarsEmiI")
source("Scripts/Solution-witouth-PC.R") # Sourcing from the Solution without parallell computing
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
df
# ---------------------------- PARALLELL COMPUTING -----------------------------
tic("Parallell Computing")
source("Scripts/Solution-with-PC.R")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
tic("split_M_sim")
source("Scripts/Solution-splitM_sim.R")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
df
results
unlist(results)
# Set up the parallel backend
maxcores <- 8 # Max amount of cores
Cores <- min(parallel::detectCores(), maxcores)
plan(multisession, workers = Cores)
# Assignment 1:
library(tweedie)
library(ggplot2)
library(tictoc)
library(tidyverse)
printTicTocLog <- # Function copied from BAN400 lecture about parallell computing
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
# -------------------------------- REGULAR LOOPS -------------------------------
tic("Regular Loop")
source("Scripts/Solution-witouth-PC.R") # Sourcing from the Solution without parallell computing
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
# ---------------------------- PARALLELL COMPUTING -----------------------------
tic("Parallell Computing")
source("Scripts/Solution-with-PC.R")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
tic("split_M_sim")
source("Scripts/Solution-splitM_sim.R")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
# Assignment 2:
# Redefine the MTweedieTests function to use furrr
MTweedieTests <- function(N, M, sig) {
# Use furrr::future_map_dbl to parallelize the simulations
results <- future_map_dbl(1:M, ~simTweedieTest(N) < sig)
# Calculate the proportion of simulations that are less than sig
share_reject <- mean(results)
return(share_reject)
}
# Redefine df as before
df <- expand.grid(
N = c(10, 100, 1000, 5000, 10000),
M = 1000,
share_reject = NA
)
# Initialize the furrr package to use multiple cores
plan(multiprocess)
# Initialize the furrr package to use multiple cores
plan(multisession)
# Run simulations using the parallelized MTweedieTests function
for (i in 1:nrow(df)) {
df$share_reject[i] <- MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05
)
}
# Stop the furrr plan
plan(NULL)
df
tic("split_M_sim")
source("Scripts/Solution-splitM_sim.R")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
# Assignment 2:
maxcores <- 8 # Max amount of cores
Cores <- min(parallel::detectCores(), maxcores)
# Redefine the MTweedieTests function to use furrr
MTweedieTests <- function(N, M, sig) {
# Use furrr::future_map_dbl to parallelize the simulations
results <- future_map_dbl(1:M, ~simTweedieTest(N) < sig)
# Calculate the proportion of simulations that are less than sig
share_reject <- mean(results)
return(share_reject)
}
# Redefine df as before
df <- expand.grid(
N = c(10, 100, 1000, 5000, 10000),
M = 1000,
share_reject = NA
)
# Initialize the furrr package to use multiple cores
plan(multisession, workers = Cores)
# Run simulations using the parallelized MTweedieTests function
for (i in 1:nrow(df)) {
df$share_reject[i] <- MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05
)
}
df
# ---------------------------- PARALLELL COMPUTING -----------------------------
tic("Parallell Computing")
source("Scripts/Solution-with-PC.R")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
df
